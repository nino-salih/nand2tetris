// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    //********************DECODER********************//   
    //DEST                                   Null       M*        D*   *MD       A*        AM*       AD        AMD
    //Instruction[3] d3 M
    //Instruction[4] d2 D
    //Instruction[5] d1 A
    And(a=instruction[15], b=instruction[5], out=setALU);

    Not(in=instruction[15], out=notLastBit);
    Or(a=notLastBit, b=instruction[5], out=loadA);
    
    And(a=instruction[15], b=instruction[4], out=loadD);

    //writeM ?
    And(a=instruction[15], b=instruction[3], out=writeM);
    
    //JUMP                                              
    //Instruction[0] j3 (out > 0) JGT
    //instruction[1] j2 (out = 0) JEQ
    //instruciton[2] j1 (out < 0) JLT
    Not(in=zr, out=nzr);
    Not(in=ng, out=p);
    
    And(a=p, b=nzr, out=isJGT);
    
    And(a=instruction[0], b=isJGT, out=JGT);

    And(a=instruction[1], b=zr, out=JEQ);

    And(a=instruction[2], b=ng, out=JLT);  

    Or(a=JGT, b=JEQ, out=JGE);
    Or(a=JLT, b=JGE, out=ld);

    And(a=instruction[15], b=ld, out=load);
    
    Not(in=load, out=notLoad);
    
    
    //********************DECODER********************//
    
    
    Mux16(a=instruction, b=ALUout, sel=setALU, out=toA);

    //A   
    ARegister(in=toA, load=loadA, out=outA, out[0..14]=addressM);
    
    // A/M
    Mux16(a=outA, b=inM, sel=instruction[12], out=outAM);

    PC(in=outA, load=load, inc=notLoad, reset=reset, out[0..14]=pc);
    
    //D
    DRegister(in=ALUout, load=loadD, out=outD);


    ALU(x=outD, y=outAM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=ALUout, zr=zr, ng=ng);      
    
}