// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */
CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    
    DMux8Way(in=load, sel=address[3..5], a=selectA, b=selectB, c=selectC, d=selectD, e=selectE, f=selectF, g=selectG, h=selectH);
    
    
    RAM8(in=in, load=selectA, address=address[0..2], out=outA);
    RAM8(in=in, load=selectB, address=address[0..2], out=outB);
    RAM8(in=in, load=selectC, address=address[0..2], out=outC);
    RAM8(in=in, load=selectD, address=address[0..2], out=outD);

    RAM8(in=in, load=selectE, address=address[0..2], out=outE);
    RAM8(in=in, load=selectF, address=address[0..2], out=outF);
    RAM8(in=in, load=selectG, address=address[0..2], out=outG);
    RAM8(in=in, load=selectH, address=address[0..2], out=outH);

    Mux8Way16(a=outA, b=outB, c=outC, d=outD, e=outE, f=outF, g=outG, h=outH, sel=address[3..5], out=out);
}